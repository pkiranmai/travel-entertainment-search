{"remainingRequest":"/home/sunil/Downloads/public_html/hw8_angular/hw8-angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/sunil/Downloads/public_html/hw8_angular/hw8-angular/node_modules/ng-bootstrap-form-validation/esm5/ng-bootstrap-form-validation.js","dependencies":[{"path":"/home/sunil/Downloads/public_html/hw8_angular/hw8-angular/node_modules/ng-bootstrap-form-validation/esm5/ng-bootstrap-form-validation.js","mtime":1515985303000},{"path":"/home/sunil/Downloads/public_html/hw8_angular/hw8-angular/node_modules/cache-loader/dist/cjs.js","mtime":1522354142110},{"path":"/home/sunil/Downloads/public_html/hw8_angular/hw8-angular/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { CommonModule } from '@angular/common';\nimport { Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, InjectionToken, Input, NgModule, Output } from '@angular/core';\nimport { FormControlName, FormGroup } from '@angular/forms';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar FormValidationDirective = /*@__PURE__*/ (function () {\n    function FormValidationDirective() {\n        this.validSubmit = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    FormValidationDirective.prototype.onSubmit = function () {\n        this.markAsTouchedAndDirty(this.formGroup);\n        if (this.formGroup.valid) {\n            this.validSubmit.emit(this.formGroup.value);\n        }\n    };\n    /**\n     * @param {?} formGroup\n     * @return {?}\n     */\n    FormValidationDirective.prototype.markAsTouchedAndDirty = function (formGroup) {\n        var _this = this;\n        Object.keys(formGroup.controls).forEach(function (key) {\n            var /** @type {?} */ control = formGroup.controls[key];\n            if (control instanceof FormGroup) {\n                _this.markAsTouchedAndDirty(/** @type {?} */ (control));\n            }\n            else if (control.enabled) {\n                control.markAsDirty();\n                control.markAsTouched();\n                control.updateValueAndValidity();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    FormValidationDirective.prototype.ngOnInit = function () { };\n    return FormValidationDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DEFAULT_ERRORS = [\n    {\n        error: \"required\",\n        format: function (label) { return label + \" is required\"; }\n    },\n    {\n        error: \"pattern\",\n        format: function (label) { return label + \" is invalid\"; }\n    },\n    {\n        error: \"minlength\",\n        format: function (label, error) { return label + \" must be at least \" + error.requiredLength + \" characters\"; }\n    },\n    {\n        error: \"maxlength\",\n        format: function (label, error) { return label + \" must be no longer than \" + error.requiredLength + \" characters\"; }\n    },\n    {\n        error: \"requiredTrue\",\n        format: function (label, error) { return label + \" is required\"; }\n    },\n    {\n        error: \"email\",\n        format: function (label, error) { return \"Invalid email address\"; }\n    },\n    {\n        error: \"max\",\n        format: function (label, error) { return label + \" must be no greater than \" + error.max; }\n    },\n    {\n        error: \"min\",\n        format: function (label, error) { return label + \" must be no less than \" + error.min; }\n    }\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar CUSTOM_ERROR_MESSAGES = new InjectionToken(\"ng-bootstrap-form-validation custom error messages\");\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ErrorMessageService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?=} customErrorMessages\n     */\n    function ErrorMessageService(customErrorMessages) {\n        if (customErrorMessages === void 0) {\n            customErrorMessages = [];\n        }\n        this.customErrorMessages = customErrorMessages;\n        this.defaultErrors = DEFAULT_ERRORS;\n    }\n    Object.defineProperty(ErrorMessageService.prototype, \"errorMessages\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.customErrorMessages.concat(this.defaultErrors);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ErrorMessageService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MessagesComponent = /*@__PURE__*/ (function () {\n    function MessagesComponent() {\n        this.messages = function () { return []; };\n    }\n    return MessagesComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar FormGroupComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} elRef\n     * @param {?} errorMessageService\n     */\n    function FormGroupComponent(elRef, errorMessageService) {\n        var _this = this;\n        this.elRef = elRef;\n        this.errorMessageService = errorMessageService;\n        this.customErrorMessages = [];\n        this.validationDisabled = false;\n        this.messages = function () { return _this.getMessages(); };\n    }\n    Object.defineProperty(FormGroupComponent.prototype, \"hasErrors\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return (this.FormControlNames.some(function (c) { return !c.valid && c.dirty && c.touched; }) &&\n                !this.validationDisabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupComponent.prototype, \"hasSuccess\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return (!this.FormControlNames.some(function (c) { return !c.valid; }) &&\n                this.FormControlNames.some(function (c) { return c.dirty && c.touched; }) &&\n                !this.validationDisabled);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormGroupComponent.prototype.ngAfterContentInit = function () {\n        if (this.messagesBlock) {\n            this.messagesBlock.messages = this.messages;\n        }\n    };\n    Object.defineProperty(FormGroupComponent.prototype, \"label\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            var /** @type {?} */ label = this.elRef.nativeElement.querySelector(\"label\");\n            return label && label.textContent ? label.textContent.trim() : \"This field\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupComponent.prototype, \"isDirtyAndTouched\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.FormControlNames.some(function (c) { return c.dirty && c.touched; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormGroupComponent.prototype, \"errorMessages\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.customErrorMessages.concat(this.errorMessageService.errorMessages);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FormGroupComponent.prototype.getMessages = function () {\n        var _this = this;\n        var /** @type {?} */ messages = [];\n        if (!this.isDirtyAndTouched || this.validationDisabled) {\n            return messages;\n        }\n        this.FormControlNames.filter(function (c) { return !c.valid; }).forEach(function (control) {\n            Object.keys(control.errors).forEach(function (key) {\n                var /** @type {?} */ error = _this.errorMessages.find(function (err) { return err.error === key; });\n                if (!error) {\n                    return;\n                }\n                messages.push(error.format(_this.label, control.errors[key]));\n            });\n        });\n        return messages;\n    };\n    return FormGroupComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgBootstrapFormValidationModule = /*@__PURE__*/ (function () {\n    function NgBootstrapFormValidationModule() {\n    }\n    /**\n     * @param {?=} customErrorMessages\n     * @return {?}\n     */\n    NgBootstrapFormValidationModule.forRoot = function (customErrorMessages) {\n        return {\n            ngModule: NgBootstrapFormValidationModule,\n            providers: [\n                {\n                    provide: ErrorMessageService,\n                    useFactory: errorMessageServiceFactory,\n                    deps: [CUSTOM_ERROR_MESSAGES]\n                },\n                {\n                    provide: CUSTOM_ERROR_MESSAGES,\n                    useValue: customErrorMessages\n                }\n            ]\n        };\n    };\n    return NgBootstrapFormValidationModule;\n}());\n/**\n * @param {?=} customErrorMessages\n * @return {?}\n */\nfunction errorMessageServiceFactory(customErrorMessages) {\n    return new ErrorMessageService(customErrorMessages);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { errorMessageServiceFactory, NgBootstrapFormValidationModule, FormValidationDirective, FormGroupComponent, MessagesComponent, ErrorMessageService as ɵa, CUSTOM_ERROR_MESSAGES as ɵb };\n//# sourceMappingURL=ng-bootstrap-form-validation.js.map\n",null]}