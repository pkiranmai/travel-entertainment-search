(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', '@angular/forms'], factory) :
	(factory((global['ng-bootstrap-form-validation'] = {}),global.ng.common,global.ng.core,global.ng.forms));
}(this, (function (exports,common,core,forms) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormValidationDirective = /** @class */ (function () {
    function FormValidationDirective() {
        this.validSubmit = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    FormValidationDirective.prototype.onSubmit = function () {
        this.markAsTouchedAndDirty(this.formGroup);
        if (this.formGroup.valid) {
            this.validSubmit.emit(this.formGroup.value);
        }
    };
    /**
     * @param {?} formGroup
     * @return {?}
     */
    FormValidationDirective.prototype.markAsTouchedAndDirty = function (formGroup) {
        var _this = this;
        Object.keys(formGroup.controls).forEach(function (key) {
            var /** @type {?} */ control = formGroup.controls[key];
            if (control instanceof forms.FormGroup) {
                _this.markAsTouchedAndDirty(/** @type {?} */ (control));
            }
            else if (control.enabled) {
                control.markAsDirty();
                control.markAsTouched();
                control.updateValueAndValidity();
            }
        });
    };
    /**
     * @return {?}
     */
    FormValidationDirective.prototype.ngOnInit = function () { };
    return FormValidationDirective;
}());
FormValidationDirective.decorators = [
    { type: core.Directive, args: [{
                selector: "form[formGroup]"
            },] },
];
/** @nocollapse */
FormValidationDirective.ctorParameters = function () { return []; };
FormValidationDirective.propDecorators = {
    "formGroup": [{ type: core.Input },],
    "validSubmit": [{ type: core.Output },],
    "onSubmit": [{ type: core.HostListener, args: ["submit",] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DEFAULT_ERRORS = [
    {
        error: "required",
        format: function (label) { return label + " is required"; }
    },
    {
        error: "pattern",
        format: function (label) { return label + " is invalid"; }
    },
    {
        error: "minlength",
        format: function (label, error) { return label + " must be at least " + error.requiredLength + " characters"; }
    },
    {
        error: "maxlength",
        format: function (label, error) { return label + " must be no longer than " + error.requiredLength + " characters"; }
    },
    {
        error: "requiredTrue",
        format: function (label, error) { return label + " is required"; }
    },
    {
        error: "email",
        format: function (label, error) { return "Invalid email address"; }
    },
    {
        error: "max",
        format: function (label, error) { return label + " must be no greater than " + error.max; }
    },
    {
        error: "min",
        format: function (label, error) { return label + " must be no less than " + error.min; }
    }
];
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CUSTOM_ERROR_MESSAGES = new core.InjectionToken("ng-bootstrap-form-validation custom error messages");
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ErrorMessageService = /** @class */ (function () {
    /**
     * @param {?=} customErrorMessages
     */
    function ErrorMessageService(customErrorMessages) {
        if (customErrorMessages === void 0) { customErrorMessages = []; }
        this.customErrorMessages = customErrorMessages;
        this.defaultErrors = DEFAULT_ERRORS;
    }
    Object.defineProperty(ErrorMessageService.prototype, "errorMessages", {
        /**
         * @return {?}
         */
        get: function () {
            return this.customErrorMessages.concat(this.defaultErrors);
        },
        enumerable: true,
        configurable: true
    });
    return ErrorMessageService;
}());
ErrorMessageService.decorators = [
    { type: core.Injectable },
];
/** @nocollapse */
ErrorMessageService.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: core.Inject, args: [CUSTOM_ERROR_MESSAGES,] },] },
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MessagesComponent = /** @class */ (function () {
    function MessagesComponent() {
        this.messages = function () { return []; };
    }
    return MessagesComponent;
}());
MessagesComponent.decorators = [
    { type: core.Component, args: [{
                selector: "bfv-messages",
                template: "\n    <span class=\"help-block\" *ngFor=\"let message of messages()\">{{message}}</span>\n  "
            },] },
];
/** @nocollapse */
MessagesComponent.ctorParameters = function () { return []; };
MessagesComponent.propDecorators = {
    "messages": [{ type: core.Input },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormGroupComponent = /** @class */ (function () {
    /**
     * @param {?} elRef
     * @param {?} errorMessageService
     */
    function FormGroupComponent(elRef, errorMessageService) {
        var _this = this;
        this.elRef = elRef;
        this.errorMessageService = errorMessageService;
        this.customErrorMessages = [];
        this.validationDisabled = false;
        this.messages = function () { return _this.getMessages(); };
    }
    Object.defineProperty(FormGroupComponent.prototype, "hasErrors", {
        /**
         * @return {?}
         */
        get: function () {
            return (this.FormControlNames.some(function (c) { return !c.valid && c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "hasSuccess", {
        /**
         * @return {?}
         */
        get: function () {
            return (!this.FormControlNames.some(function (c) { return !c.valid; }) &&
                this.FormControlNames.some(function (c) { return c.dirty && c.touched; }) &&
                !this.validationDisabled);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormGroupComponent.prototype.ngAfterContentInit = function () {
        if (this.messagesBlock) {
            this.messagesBlock.messages = this.messages;
        }
    };
    Object.defineProperty(FormGroupComponent.prototype, "label", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ label = this.elRef.nativeElement.querySelector("label");
            return label && label.textContent ? label.textContent.trim() : "This field";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "isDirtyAndTouched", {
        /**
         * @return {?}
         */
        get: function () {
            return this.FormControlNames.some(function (c) { return c.dirty && c.touched; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupComponent.prototype, "errorMessages", {
        /**
         * @return {?}
         */
        get: function () {
            return this.customErrorMessages.concat(this.errorMessageService.errorMessages);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormGroupComponent.prototype.getMessages = function () {
        var _this = this;
        var /** @type {?} */ messages = [];
        if (!this.isDirtyAndTouched || this.validationDisabled) {
            return messages;
        }
        this.FormControlNames.filter(function (c) { return !c.valid; }).forEach(function (control) {
            Object.keys(control.errors).forEach(function (key) {
                var /** @type {?} */ error = _this.errorMessages.find(function (err) { return err.error === key; });
                if (!error) {
                    return;
                }
                messages.push(error.format(_this.label, control.errors[key]));
            });
        });
        return messages;
    };
    return FormGroupComponent;
}());
FormGroupComponent.decorators = [
    { type: core.Component, args: [{
                // tslint:disable:component-selector
                selector: ".form-group",
                template: "\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  "
            },] },
];
/** @nocollapse */
FormGroupComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: ErrorMessageService, },
]; };
FormGroupComponent.propDecorators = {
    "FormControlNames": [{ type: core.ContentChildren, args: [forms.FormControlName,] },],
    "customErrorMessages": [{ type: core.Input },],
    "validationDisabled": [{ type: core.Input },],
    "hasErrors": [{ type: core.HostBinding, args: ["class.has-error",] },],
    "hasSuccess": [{ type: core.HostBinding, args: ["class.has-success",] },],
    "messagesBlock": [{ type: core.ContentChild, args: [MessagesComponent,] },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgBootstrapFormValidationModule = /** @class */ (function () {
    function NgBootstrapFormValidationModule() {
    }
    /**
     * @param {?=} customErrorMessages
     * @return {?}
     */
    NgBootstrapFormValidationModule.forRoot = function (customErrorMessages) {
        return {
            ngModule: NgBootstrapFormValidationModule,
            providers: [
                {
                    provide: ErrorMessageService,
                    useFactory: errorMessageServiceFactory,
                    deps: [CUSTOM_ERROR_MESSAGES]
                },
                {
                    provide: CUSTOM_ERROR_MESSAGES,
                    useValue: customErrorMessages
                }
            ]
        };
    };
    return NgBootstrapFormValidationModule;
}());
NgBootstrapFormValidationModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    FormValidationDirective,
                    FormGroupComponent,
                    MessagesComponent
                ],
                imports: [common.CommonModule],
                providers: [ErrorMessageService],
                exports: [FormValidationDirective, FormGroupComponent, MessagesComponent]
            },] },
];
/** @nocollapse */
NgBootstrapFormValidationModule.ctorParameters = function () { return []; };
/**
 * @param {?=} customErrorMessages
 * @return {?}
 */
function errorMessageServiceFactory(customErrorMessages) {
    return new ErrorMessageService(customErrorMessages);
}

exports.errorMessageServiceFactory = errorMessageServiceFactory;
exports.NgBootstrapFormValidationModule = NgBootstrapFormValidationModule;
exports.FormValidationDirective = FormValidationDirective;
exports.FormGroupComponent = FormGroupComponent;
exports.MessagesComponent = MessagesComponent;
exports.ɵa = ErrorMessageService;
exports.ɵb = CUSTOM_ERROR_MESSAGES;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-bootstrap-form-validation.umd.js.map
