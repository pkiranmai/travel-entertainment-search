{
  "version": 3,
  "file": "ng-bootstrap-form-validation.umd.js",
  "sources": [
    "ng://ng-bootstrap-form-validation/src/lib/ng-bootstrap-form-validation.module.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/form-group-component/form-group-component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/messages/messages.component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Services/error-message.service.ts",
    "ng://ng-bootstrap-form-validation/src/lib/default-errors.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Directives/form-validation.directive.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { FormGroupComponent } from \"./Components/form-group-component/form-group-component\";\nimport { MessagesComponent } from \"./Components/messages/messages.component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { ErrorMessage } from \"./Models/ErrorMessage\";\nimport { CUSTOM_ERROR_MESSAGES } from \"./Tokens/tokens\";\n\n@NgModule({\n  declarations: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent\n  ],\n  imports: [CommonModule],\n  providers: [ErrorMessageService],\n  exports: [FormValidationDirective, FormGroupComponent, MessagesComponent]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(customErrorMessages?: ErrorMessage[]): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: ErrorMessageService,\n          useFactory: errorMessageServiceFactory,\n          deps: [CUSTOM_ERROR_MESSAGES]\n        },\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: customErrorMessages\n        }\n      ]\n    };\n  }\n}\n\nexport function errorMessageServiceFactory(\n  customErrorMessages?: ErrorMessage[]\n) {\n  return new ErrorMessageService(customErrorMessages);\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  AfterContentInit\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessage } from \"../../Models/ErrorMessage\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\nimport { MessagesComponent } from \"../messages/messages.component\";\n\n@Component({\n  // tslint:disable:component-selector\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  `\n})\nexport class FormGroupComponent implements AfterContentInit {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input() customErrorMessages: ErrorMessage[] = [];\n\n  @Input() validationDisabled = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @ContentChild(MessagesComponent) public messagesBlock: MessagesComponent;\n\n  public messages: () => string[];\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {\n    this.messages = () => this.getMessages();\n  }\n\n  ngAfterContentInit() {\n    if (this.messagesBlock) {\n      this.messagesBlock.messages = this.messages;\n    }\n  }\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  get errorMessages(): ErrorMessage[] {\n    return [\n      ...this.customErrorMessages,\n      ...this.errorMessageService.errorMessages\n    ];\n  }\n\n  private getMessages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) {\n      return messages;\n    }\n    this.FormControlNames.filter(c => !c.valid).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(err => err.error === key);\n        if (!error) {\n          return;\n        }\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n    return messages;\n  }\n}\n",
    "import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bfv-messages\",\n  template: `\n    <span class=\"help-block\" *ngFor=\"let message of messages()\">{{message}}</span>\n  `\n})\nexport class MessagesComponent {\n  @Input() public messages = () => [];\n\n  constructor() {}\n}\n",
    "import { Inject, Injectable } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\n\n@Injectable()\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES)\n    public customErrorMessages: ErrorMessage[] = []\n  ) {}\n\n  get errorMessages() {\n    return [...this.customErrorMessages, ...this.defaultErrors];\n  }\n}\n",
    "import { ErrorMessage } from \"./Models/ErrorMessage\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  OnInit,\n  EventEmitter,\n  Output\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive({\n  selector: \"form[formGroup]\"\n})\nexport class FormValidationDirective implements OnInit {\n  @Input() formGroup: FormGroup;\n  @Output() validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.controls[key];\n      if (control instanceof FormGroup) {\n        this.markAsTouchedAndDirty(control as FormGroup);\n      } else if (control.enabled) {\n        control.markAsDirty();\n        control.markAsTouched();\n        control.updateValueAndValidity();\n      }\n    });\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n"
  ],
  "names": [
    "ContentChild",
    "HostBinding",
    "Input",
    "ContentChildren",
    "FormControlName",
    "Component",
    "Injectable",
    "Output",
    "Directive",
    "FormGroup",
    "EventEmitter"
  ],
  "mappings": "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"
}
