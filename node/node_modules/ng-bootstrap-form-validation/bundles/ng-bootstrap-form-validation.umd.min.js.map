{
  "version": 3,
  "file": "ng-bootstrap-form-validation.umd.min.js",
  "sources": [
    "ng://ng-bootstrap-form-validation/src/lib/Directives/form-validation.directive.ts",
    "ng://ng-bootstrap-form-validation/src/lib/default-errors.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Services/error-message.service.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/messages/messages.component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/form-group-component/form-group-component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/ng-bootstrap-form-validation.module.ts"
  ],
  "sourcesContent": [
    "import {\n  Directive,\n  Input,\n  HostListener,\n  OnInit,\n  EventEmitter,\n  Output\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive({\n  selector: \"form[formGroup]\"\n})\nexport class FormValidationDirective implements OnInit {\n  @Input() formGroup: FormGroup;\n  @Output() validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.controls[key];\n      if (control instanceof FormGroup) {\n        this.markAsTouchedAndDirty(control as FormGroup);\n      } else if (control.enabled) {\n        control.markAsDirty();\n        control.markAsTouched();\n        control.updateValueAndValidity();\n      }\n    });\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n",
    "import { ErrorMessage } from \"./Models/ErrorMessage\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n",
    "import { Inject, Injectable } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\n\n@Injectable()\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES)\n    public customErrorMessages: ErrorMessage[] = []\n  ) {}\n\n  get errorMessages() {\n    return [...this.customErrorMessages, ...this.defaultErrors];\n  }\n}\n",
    "import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bfv-messages\",\n  template: `\n    <span class=\"help-block\" *ngFor=\"let message of messages()\">{{message}}</span>\n  `\n})\nexport class MessagesComponent {\n  @Input() public messages = () => [];\n\n  constructor() {}\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  AfterContentInit\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessage } from \"../../Models/ErrorMessage\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\nimport { MessagesComponent } from \"../messages/messages.component\";\n\n@Component({\n  // tslint:disable:component-selector\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  `\n})\nexport class FormGroupComponent implements AfterContentInit {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input() customErrorMessages: ErrorMessage[] = [];\n\n  @Input() validationDisabled = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @ContentChild(MessagesComponent) public messagesBlock: MessagesComponent;\n\n  public messages: () => string[];\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {\n    this.messages = () => this.getMessages();\n  }\n\n  ngAfterContentInit() {\n    if (this.messagesBlock) {\n      this.messagesBlock.messages = this.messages;\n    }\n  }\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  get errorMessages(): ErrorMessage[] {\n    return [\n      ...this.customErrorMessages,\n      ...this.errorMessageService.errorMessages\n    ];\n  }\n\n  private getMessages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) {\n      return messages;\n    }\n    this.FormControlNames.filter(c => !c.valid).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(err => err.error === key);\n        if (!error) {\n          return;\n        }\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n    return messages;\n  }\n}\n",
    "import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { FormGroupComponent } from \"./Components/form-group-component/form-group-component\";\nimport { MessagesComponent } from \"./Components/messages/messages.component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { ErrorMessage } from \"./Models/ErrorMessage\";\nimport { CUSTOM_ERROR_MESSAGES } from \"./Tokens/tokens\";\n\n@NgModule({\n  declarations: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent\n  ],\n  imports: [CommonModule],\n  providers: [ErrorMessageService],\n  exports: [FormValidationDirective, FormGroupComponent, MessagesComponent]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(customErrorMessages?: ErrorMessage[]): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: ErrorMessageService,\n          useFactory: errorMessageServiceFactory,\n          deps: [CUSTOM_ERROR_MESSAGES]\n        },\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: customErrorMessages\n        }\n      ]\n    };\n  }\n}\n\nexport function errorMessageServiceFactory(\n  customErrorMessages?: ErrorMessage[]\n) {\n  return new ErrorMessageService(customErrorMessages);\n}\n"
  ],
  "names": [
    "FormValidationDirective",
    "this",
    "validSubmit",
    "EventEmitter",
    "markAsTouchedAndDirty",
    "formGroup",
    "valid",
    "emit",
    "value",
    "_this",
    "Object",
    "keys",
    "controls",
    "forEach",
    "key",
    "control",
    "FormGroup",
    "enabled",
    "markAsDirty",
    "markAsTouched",
    "updateValueAndValidity",
    "prototype",
    "ngOnInit",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "propDecorators",
    "Input",
    "Output",
    "DEFAULT_ERRORS",
    "error",
    "format",
    "label",
    "requiredLength",
    "max",
    "min",
    "customErrorMessages",
    "defaultErrors",
    "defineProperty",
    "ErrorMessageService",
    "get",
    "concat",
    "Injectable",
    "MessagesComponent",
    "Component",
    "ctorParameters",
    "FormGroupComponent",
    "elRef",
    "errorMessageService",
    "validationDisabled",
    "enumerable",
    "configurable",
    "FormControlNames",
    "some",
    "c",
    "dirty",
    "touched",
    "ngAfterContentInit",
    "messagesBlock",
    "textContent",
    "trim",
    "errorMessages",
    "messages",
    "filter",
    "ContentChildren",
    "FormControlName",
    "hasErrors",
    "HostBinding",
    "hasSuccess",
    "ContentChild",
    "NgBootstrapFormValidationModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useFactory",
    "errorMessageServiceFactory",
    "deps",
    "CUSTOM_ERROR_MESSAGES"
  ],
  "mappings": "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"
}
