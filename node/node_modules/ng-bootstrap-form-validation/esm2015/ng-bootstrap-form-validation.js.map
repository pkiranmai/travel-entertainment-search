{
  "version": 3,
  "file": "ng-bootstrap-form-validation.js",
  "sources": [
    "ng://ng-bootstrap-form-validation/src/lib/ng-bootstrap-form-validation.module.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/form-group-component/form-group-component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Components/messages/messages.component.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Services/error-message.service.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Tokens/tokens.ts",
    "ng://ng-bootstrap-form-validation/src/lib/default-errors.ts",
    "ng://ng-bootstrap-form-validation/src/lib/Directives/form-validation.directive.ts"
  ],
  "sourcesContent": [
    "import { CommonModule } from \"@angular/common\";\nimport { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { FormValidationDirective } from \"./Directives/form-validation.directive\";\nimport { FormGroupComponent } from \"./Components/form-group-component/form-group-component\";\nimport { MessagesComponent } from \"./Components/messages/messages.component\";\nimport { ErrorMessageService } from \"./Services/error-message.service\";\nimport { ErrorMessage } from \"./Models/ErrorMessage\";\nimport { CUSTOM_ERROR_MESSAGES } from \"./Tokens/tokens\";\n\n@NgModule({\n  declarations: [\n    FormValidationDirective,\n    FormGroupComponent,\n    MessagesComponent\n  ],\n  imports: [CommonModule],\n  providers: [ErrorMessageService],\n  exports: [FormValidationDirective, FormGroupComponent, MessagesComponent]\n})\nexport class NgBootstrapFormValidationModule {\n  static forRoot(customErrorMessages?: ErrorMessage[]): ModuleWithProviders {\n    return {\n      ngModule: NgBootstrapFormValidationModule,\n      providers: [\n        {\n          provide: ErrorMessageService,\n          useFactory: errorMessageServiceFactory,\n          deps: [CUSTOM_ERROR_MESSAGES]\n        },\n        {\n          provide: CUSTOM_ERROR_MESSAGES,\n          useValue: customErrorMessages\n        }\n      ]\n    };\n  }\n}\n\nexport function errorMessageServiceFactory(\n  customErrorMessages?: ErrorMessage[]\n) {\n  return new ErrorMessageService(customErrorMessages);\n}\n",
    "import {\n  Component,\n  ContentChildren,\n  ContentChild,\n  ElementRef,\n  HostBinding,\n  Input,\n  QueryList,\n  AfterContentInit\n} from \"@angular/core\";\nimport { FormControlName } from \"@angular/forms\";\nimport { ErrorMessage } from \"../../Models/ErrorMessage\";\nimport { ErrorMessageService } from \"../../Services/error-message.service\";\nimport { MessagesComponent } from \"../messages/messages.component\";\n\n@Component({\n  // tslint:disable:component-selector\n  selector: \".form-group\",\n  template: `\n    <ng-content></ng-content>\n    <bfv-messages *ngIf=\"!messagesBlock\" [messages]=\"messages\"></bfv-messages>\n  `\n})\nexport class FormGroupComponent implements AfterContentInit {\n  @ContentChildren(FormControlName)\n  FormControlNames: QueryList<FormControlName>;\n\n  @Input() customErrorMessages: ErrorMessage[] = [];\n\n  @Input() validationDisabled = false;\n\n  @HostBinding(\"class.has-error\")\n  get hasErrors() {\n    return (\n      this.FormControlNames.some(c => !c.valid && c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @HostBinding(\"class.has-success\")\n  get hasSuccess() {\n    return (\n      !this.FormControlNames.some(c => !c.valid) &&\n      this.FormControlNames.some(c => c.dirty && c.touched) &&\n      !this.validationDisabled\n    );\n  }\n\n  @ContentChild(MessagesComponent) public messagesBlock: MessagesComponent;\n\n  public messages: () => string[];\n\n  constructor(\n    private elRef: ElementRef,\n    private errorMessageService: ErrorMessageService\n  ) {\n    this.messages = () => this.getMessages();\n  }\n\n  ngAfterContentInit() {\n    if (this.messagesBlock) {\n      this.messagesBlock.messages = this.messages;\n    }\n  }\n\n  get label() {\n    const label = this.elRef.nativeElement.querySelector(\"label\");\n    return label && label.textContent ? label.textContent.trim() : \"This field\";\n  }\n\n  get isDirtyAndTouched() {\n    return this.FormControlNames.some(c => c.dirty && c.touched);\n  }\n\n  get errorMessages(): ErrorMessage[] {\n    return [\n      ...this.customErrorMessages,\n      ...this.errorMessageService.errorMessages\n    ];\n  }\n\n  private getMessages(): string[] {\n    const messages = [];\n    if (!this.isDirtyAndTouched || this.validationDisabled) {\n      return messages;\n    }\n    this.FormControlNames.filter(c => !c.valid).forEach(control => {\n      Object.keys(control.errors).forEach(key => {\n        const error = this.errorMessages.find(err => err.error === key);\n        if (!error) {\n          return;\n        }\n        messages.push(error.format(this.label, control.errors[key]));\n      });\n    });\n    return messages;\n  }\n}\n",
    "import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bfv-messages\",\n  template: `\n    <span class=\"help-block\" *ngFor=\"let message of messages()\">{{message}}</span>\n  `\n})\nexport class MessagesComponent {\n  @Input() public messages = () => [];\n\n  constructor() {}\n}\n",
    "import { Inject, Injectable } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\nimport { DEFAULT_ERRORS } from \"../default-errors\";\nimport { CUSTOM_ERROR_MESSAGES } from \"../Tokens/tokens\";\n\n@Injectable()\nexport class ErrorMessageService {\n  private defaultErrors = DEFAULT_ERRORS;\n\n  constructor(\n    @Inject(CUSTOM_ERROR_MESSAGES)\n    public customErrorMessages: ErrorMessage[] = []\n  ) {}\n\n  get errorMessages() {\n    return [...this.customErrorMessages, ...this.defaultErrors];\n  }\n}\n",
    "import { InjectionToken } from \"@angular/core\";\nimport { ErrorMessage } from \"../Models/ErrorMessage\";\n\nexport const CUSTOM_ERROR_MESSAGES = new InjectionToken<ErrorMessage[]>(\n  \"ng-bootstrap-form-validation custom error messages\"\n);\n",
    "import { ErrorMessage } from \"./Models/ErrorMessage\";\n\nexport const DEFAULT_ERRORS: ErrorMessage[] = [\n  {\n    error: \"required\",\n    format: label => `${label} is required`\n  },\n  {\n    error: \"pattern\",\n    format: label => `${label} is invalid`\n  },\n  {\n    error: \"minlength\",\n    format: (label, error) =>\n      `${label} must be at least ${error.requiredLength} characters`\n  },\n  {\n    error: \"maxlength\",\n    format: (label, error) =>\n      `${label} must be no longer than ${error.requiredLength} characters`\n  },\n  {\n    error: \"requiredTrue\",\n    format: (label, error) => `${label} is required`\n  },\n  {\n    error: \"email\",\n    format: (label, error) => `Invalid email address`\n  },\n  {\n    error: \"max\",\n    format: (label, error) => `${label} must be no greater than ${error.max}`\n  },\n  {\n    error: \"min\",\n    format: (label, error) => `${label} must be no less than ${error.min}`\n  }\n];\n",
    "import {\n  Directive,\n  Input,\n  HostListener,\n  OnInit,\n  EventEmitter,\n  Output\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\n\n@Directive({\n  selector: \"form[formGroup]\"\n})\nexport class FormValidationDirective implements OnInit {\n  @Input() formGroup: FormGroup;\n  @Output() validSubmit = new EventEmitter<any>();\n\n  @HostListener(\"submit\")\n  onSubmit() {\n    this.markAsTouchedAndDirty(this.formGroup);\n    if (this.formGroup.valid) {\n      this.validSubmit.emit(this.formGroup.value);\n    }\n  }\n\n  markAsTouchedAndDirty(formGroup: FormGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.controls[key];\n      if (control instanceof FormGroup) {\n        this.markAsTouchedAndDirty(control as FormGroup);\n      } else if (control.enabled) {\n        control.markAsDirty();\n        control.markAsTouched();\n        control.updateValueAndValidity();\n      }\n    });\n  }\n\n  constructor() {}\n\n  ngOnInit() {}\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
